// https://onlinegdb.com/NtKNFoFYW
/**********************************************
 * Автор:    Халилов Н.Х.                      *
 * Дата:     26.11.2021                        *
 * Название: Перевод арабских чисел            *
 ***********************************************/
#include <iostream>
#include <string>
#include <iomanip>
#include <cmath> 
#include <vector>

using namespace std;

typedef struct {
    char chNumber;
    int intNumber;
} roman_t;

vector <roman_t> RomanNumeral;

typedef struct {
  string strNumber;
  int intNumber;
} manyCharacter;

vector <manyCharacter> allRomanNumeral;

void listOfRomanNumeralWithOneCharacter(){
   RomanNumeral.push_back({'I',1}); 
   RomanNumeral.push_back({'V',5}); 
   RomanNumeral.push_back({'X',10}); 
   RomanNumeral.push_back({'L',50}); 
   RomanNumeral.push_back({'C',100}); 
   RomanNumeral.push_back({'D',500}); 
   RomanNumeral.push_back({'M',1000}); 

}

void listOfRomanNumeralWithManyCharacter () {
  allRomanNumeral.push_back({"I",1}); 
  allRomanNumeral.push_back({"II",2}); 
  allRomanNumeral.push_back({"III",3});
  allRomanNumeral.push_back({"V",5}); 
  allRomanNumeral.push_back({"IV",4}); 
  allRomanNumeral.push_back({"VI",6}); 
  allRomanNumeral.push_back({"VII",7}); 
  allRomanNumeral.push_back({"VIII",8}); 
  allRomanNumeral.push_back({"IX",9});
  allRomanNumeral.push_back({"X",10}); 
  allRomanNumeral.push_back({"XX",20}); 
  allRomanNumeral.push_back({"XXX",30}); 
  allRomanNumeral.push_back({"XL",40});
  allRomanNumeral.push_back({"L",50}); 
  allRomanNumeral.push_back({"XC",90});
  allRomanNumeral.push_back({"C",100}); 
  allRomanNumeral.push_back({"CС",200}); 
  allRomanNumeral.push_back({"CСС",300}); 
  allRomanNumeral.push_back({"CD",400});
  allRomanNumeral.push_back({"D",500}); 
  allRomanNumeral.push_back({"СM",900});
  allRomanNumeral.push_back({"M",1000}); 
  allRomanNumeral.push_back({"MM",2000}); 
  allRomanNumeral.push_back({"MMM",3000});
}

void menu() {

  cout << "\t\t\tMenu" << endl;
  cout << "1 - Преобразование арабских цифр в римские цифры" << endl;
  cout << "2 - Преобразование римских цифр в арабские цифры" << endl;
  cout << "3 - Выход" << endl;
}

void convertArabicNumeralsToRomanNumerals(string arabicNumber) {
    
 
}

void convertRomanNumeralsToArabicNumerals(string RomanNumber) {
  // cout << endl << 2 << endl<< endl;
  listOfRomanNumeralWithOneCharacter();
  int number = 0, num = 0;

  for (int symbol = 0; RomanNumber[symbol]; ++symbol) {

    for (int arrIndex = 0; arrIndex < RomanNumeral.size(); ++arrIndex) {
      if (RomanNumeral[arrIndex].chNumber == RomanNumber[symbol]) {

        if (number < RomanNumeral[arrIndex].intNumber && number != 0) {
          num = num - number + RomanNumeral[arrIndex].intNumber - number;

        } else {
          num += RomanNumeral[arrIndex].intNumber;
          number = RomanNumeral[arrIndex].intNumber;

        }

        break;
      }
    }

  }
  cout << "Римская цифра " << RomanNumber << " равна арабской цифре " << num << ".\n\n";
}

string inputRoman() {
  cout << endl;
  string romanNumber;
  cout << "Введите римские цифры: ";
  cin >> romanNumber;
  return romanNumber;
}

int inputArabic(){
    cout << endl;
    int arabicNumber;
    cout << "Введите арабские цифры: ";
    cin >> arabicNumber;
    return arabicNumber;
}

void outputAnInvalidNumber(string romanNumber) {
  system("clear");
  cout << "\t\t\t\tПреобразование римских цифр в арабские цифры\n\n";
  cout << romanNumber << " - является неправильное число!" << endl;
  cout << "Введите корректное число!" << endl;
}

bool verificationOfTheEnteredRomanDigit(string romanNumber) {
  bool digit = true;

  listOfRomanNumeralWithOneCharacter();
  vector < roman_t > listOfNumbersOnText;

  for (int symbol = 0; romanNumber[symbol]; ++symbol) {
    for (int arrIndex = 0; arrIndex < RomanNumeral.size(); ++arrIndex) {

      if (RomanNumeral[arrIndex].chNumber == romanNumber[symbol]) {
        listOfNumbersOnText.push_back({
          RomanNumeral[arrIndex].chNumber,
          RomanNumeral[arrIndex].intNumber
        });
        break;

      }

    }
    if (symbol == romanNumber.length() - 1 && romanNumber.length() != listOfNumbersOnText.size()) {

      outputAnInvalidNumber(romanNumber);

      digit = false;
      return digit;
    }

  }

  if (listOfNumbersOnText[0].intNumber == 1 &&
    (listOfNumbersOnText[2].intNumber == 100 ||
      listOfNumbersOnText[2].intNumber == 500 ||
      listOfNumbersOnText[2].intNumber == 1000)) {
    digit = false;
    outputAnInvalidNumber(romanNumber);
    cout << 1 << endl;

  } else if (listOfNumbersOnText[1].intNumber == 10 &&
    (listOfNumbersOnText[2].intNumber == 500 ||
      listOfNumbersOnText[2].intNumber == 1000)) {
    outputAnInvalidNumber(romanNumber);
    cout << 2 << endl;
    digit = false;

  } else if (romanNumber.length() >= 4 &&
    listOfNumbersOnText[2].intNumber >= 1 &&
    listOfNumbersOnText[2].intNumber != listOfNumbersOnText[1].intNumber &&
    (listOfNumbersOnText[4].intNumber >= 1 &&
      listOfNumbersOnText[3].intNumber != listOfNumbersOnText[2].intNumber) &&
    listOfNumbersOnText[3].intNumber != listOfNumbersOnText[4].intNumber &&
    listOfNumbersOnText[4].intNumber != 0) {
    outputAnInvalidNumber(romanNumber);
    digit = false;

  } else {
    for (int arrIndex = 0; arrIndex < listOfNumbersOnText.size(); ++arrIndex) {
      if (arrIndex + 2 < listOfNumbersOnText.size() &&
        listOfNumbersOnText[arrIndex].intNumber != listOfNumbersOnText[arrIndex + 1].intNumber &&
        listOfNumbersOnText[arrIndex + 1].intNumber == listOfNumbersOnText[arrIndex + 2].intNumber &&
        listOfNumbersOnText[arrIndex + 1].intNumber != 1 &&
        listOfNumbersOnText[arrIndex + 2].intNumber == listOfNumbersOnText[arrIndex + 1].intNumber &&
        listOfNumbersOnText[arrIndex + 1].intNumber != 10 &&
        listOfNumbersOnText[arrIndex + 1].intNumber != 100 &&
        listOfNumbersOnText[arrIndex + 1].intNumber != 1000) {
        outputAnInvalidNumber(romanNumber);
        digit = false;
      } else if (arrIndex + 3 < listOfNumbersOnText.size() &&
        listOfNumbersOnText[arrIndex].intNumber == 1 &&
        listOfNumbersOnText[arrIndex + 1].intNumber == 1 &&
        listOfNumbersOnText[arrIndex + 2].intNumber == 1 &&
        listOfNumbersOnText[arrIndex + 3].intNumber == 1) {
        outputAnInvalidNumber(romanNumber);
        digit = false;
        cout << "Число " << listOfNumbersOnText[arrIndex].chNumber <<
          " нельзя повторить 4 раза!!" << endl;

      } else if (arrIndex + 1 < listOfNumbersOnText.size() &&
        listOfNumbersOnText[arrIndex].intNumber == 5 &&
        listOfNumbersOnText[arrIndex + 1].intNumber == 5) {
        outputAnInvalidNumber(romanNumber);
        digit = false;
        cout << "Число " << listOfNumbersOnText[arrIndex].chNumber <<
          " нельзя повторить 2 раза!!" << endl;
      } else if (arrIndex + 3 < listOfNumbersOnText.size() &&
        listOfNumbersOnText[arrIndex].intNumber == 10 &&
        listOfNumbersOnText[arrIndex + 1].intNumber == 10 &&
        listOfNumbersOnText[arrIndex + 2].intNumber == 10 &&
        listOfNumbersOnText[arrIndex + 3].intNumber == 10) {
        outputAnInvalidNumber(romanNumber);
        digit = false;
        cout << "Число " << listOfNumbersOnText[arrIndex].chNumber <<
          " нельзя повторить 4 раза!!" << endl;
      } else if (arrIndex + 1 < listOfNumbersOnText.size() &&
        listOfNumbersOnText[arrIndex].intNumber == 50 &&
        listOfNumbersOnText[arrIndex + 1].intNumber == 50) {
        outputAnInvalidNumber(romanNumber);
        digit = false;
        cout << "Число " << listOfNumbersOnText[arrIndex].chNumber <<
          " нельзя повторить 2 раза!!" << endl;
      } else if (arrIndex + 3 < listOfNumbersOnText.size() &&
        listOfNumbersOnText[arrIndex].intNumber == 100 &&
        listOfNumbersOnText[arrIndex + 1].intNumber == 100 &&
        listOfNumbersOnText[arrIndex + 2].intNumber == 100 &&
        listOfNumbersOnText[arrIndex + 3].intNumber == 100) {
        outputAnInvalidNumber(romanNumber);
        digit = false;
        cout << "Число " << listOfNumbersOnText[arrIndex].chNumber <<
          " нельзя повторить 4 раза!!" << endl;
      } else if (arrIndex + 1 < listOfNumbersOnText.size() &&
        listOfNumbersOnText[arrIndex].intNumber == 500 &&
        listOfNumbersOnText[arrIndex + 1].intNumber == 500) {
        outputAnInvalidNumber(romanNumber);
        digit = false;
        cout << "Число " << listOfNumbersOnText[arrIndex].chNumber <<
          " нельзя повторить 2 раза!!" << endl;
      } else if (arrIndex + 3 < listOfNumbersOnText.size() &&
        listOfNumbersOnText[arrIndex].intNumber == 1000 &&
        listOfNumbersOnText[arrIndex + 1].intNumber == 1000 &&
        listOfNumbersOnText[arrIndex + 2].intNumber == 1000 &&
        listOfNumbersOnText[arrIndex + 3].intNumber == 1000) {
        outputAnInvalidNumber(romanNumber);
        cout << "Число " << listOfNumbersOnText[arrIndex].chNumber <<
          " нельзя повторить 4 раза!!" << endl;
        cout << "Диапазон возможных значений: [1 .. 3999]" << endl << endl;
        digit = false;

      }
    }
  }

  return digit;

}

bool verificationOfTheEnteredArabicDigit(string arabicNumber){
    bool digit; 
    
    
    
    
    return digit;
    
    
}

int inputMenuItem(){
    int item;
    bool menuItem = false;
    string pointer;
    cout << "Вводите пункт меню: ";
    cin >> pointer;

    while (menuItem == false) {

      if (pointer == "1" || pointer == "2" || pointer == "3") {
        item = stoi(pointer);
        menuItem = true;
      } else {
        system("clear");
        cout << "Выберите правильный пункт меню!" << endl;
        menu();
        cout << "Вводите пункт меню: ";
        cin >> pointer;

      }
    }
    return item;

}

void onCase1 (){
      bool digit;
      string arabicNumber;
      system("clear");
      cout << "\t\t\t\tПреобразование арабских цифр в римские цифры\n\n";
      arabicNumber =  inputArabic();
      digit = verificationOfTheEnteredArabicDigit(arabicNumber);
      while(digit == false){
        arabicNumber = inputArabic();
        digit = verificationOfTheEnteredArabicDigit(arabicNumber);
      }
      
      if (digit == true) {
          convertArabicNumeralsToRomanNumerals(arabicNumber);
      }
      
}
void onCase2 (){
      bool digit;
      string romanNumeral;
      system("clear");
      cout << "\t\t\t\tПреобразование римских цифр в арабские цифры\n\n";
      romanNumeral = inputRoman();
      digit = verificationOfTheEnteredRomanDigit(romanNumeral);

      while (digit == false) {
        romanNumeral = inputRoman();
        digit = verificationOfTheEnteredRomanDigit(romanNumeral);

      }
      if (digit == true) {
        convertRomanNumeralsToArabicNumerals(romanNumeral);
      }
   
}

int main() {

  bool exit_r_f = false;
  
  
  while (!exit_r_f) {
    
    menu();

    switch (inputMenuItem()) {

    case 1:
      onCase1 ();
      break;
    case 2:
      onCase2 ();
      break;
    case 3:
      exit_r_f = true;
      break;

    }

  }
  return 0;
}
